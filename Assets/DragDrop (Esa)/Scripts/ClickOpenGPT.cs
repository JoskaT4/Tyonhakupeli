using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;

public class ClickOpenGPT : MonoBehaviour, IPointerClickHandler // Message from programmer: Due to inexperience, I had to use ChatGPT to solve an issue that I couldn't without wasting too much time on studying the matter. So InstantiateCaller method was generated by ChatGPT (Probably obvious).
{
    private GameObject[] instantiatedColumns;
    public GameObject[] CurriculumVitae;
    private RectTransform rectTransform;
    [SerializeField] float muhFloat = 0.5f;
    private Vector3 cvPosition = new Vector3(0, 3, 2);
    private bool hasInstantiated = false; // Flag to track if the object is already instantiated
    int tap;

    void Start()
    {
        rectTransform = GetComponent<RectTransform>();

        // Check if objects were instantiated in a previous session and restore them
        if (PlayerPrefs.GetInt("ObjectsInstantiated", 0) == 1)
        {
            InstantiateCaller(); // Automatically restore instantiated objects
        }
    }

    public void OnPointerClick(PointerEventData eventData)
    {
        tap = eventData.clickCount;

        if (tap == 2)
        {
            if (!hasInstantiated)
            {
                Invoke("InstantiateCaller", muhFloat);
            }
        }
    }

    void InstantiateCaller()
    {
        if (!hasInstantiated)
        {
            // Find the "Desktop" GameObject with the correct tag
            GameObject desktop = GameObject.FindGameObjectWithTag("Desktop");

            if (desktop != null)
            {
                // Find the "Email" GameObject by its name
                GameObject Email = GameObject.Find("Email"); // Ensure this matches the name in the Unity hierarchy

                if (Email != null)
                {
                    // Get RectTransforms
                    RectTransform emailRectTransform = Email.GetComponent<RectTransform>();
                    RectTransform desktopRectTransform = desktop.GetComponent<RectTransform>();

                    if (emailRectTransform != null && desktopRectTransform != null)
                    {
                        // Convert the Email icon's position to Desktop's coordinate space
                        Vector2 anchoredPosition = emailRectTransform.anchoredPosition; // Get Email's position
                        Vector3 worldPosition = emailRectTransform.position; // Get Email's world position
                        Vector2 localPositionOnDesktop = Vector2.zero;

                        // Use RectTransformUtility to convert world position to local position relative to Desktop
                        RectTransformUtility.ScreenPointToLocalPointInRectangle(
                            desktopRectTransform,
                            RectTransformUtility.WorldToScreenPoint(null, worldPosition),
                            null,
                            out localPositionOnDesktop
                        );

                        // Define the offset for the item placement
                        Vector2 offset = new Vector2(50, 0); // Adjust as needed (e.g., 50 units to the right of Email)

                        instantiatedColumns = new GameObject[CurriculumVitae.Length];

                        for (int i = 0; i < CurriculumVitae.Length; i++)
                        {
                            instantiatedColumns[i] = Instantiate(CurriculumVitae[i], desktop.transform);
                            RectTransform newRectTransform = instantiatedColumns[i].GetComponent<RectTransform>();
                            if (newRectTransform != null)
                            {
                                GameObject specificPrefab = CurriculumVitae[i]; // Or whichever index you want
                                // Set the new position (Email's local position + offset)
                                newRectTransform.anchoredPosition = localPositionOnDesktop + offset;

                                if (specificPrefab.name == "CompanyTask" || specificPrefab.name == "CompanyTask2") // Replace with the name of the prefab
                                {
                                    newRectTransform.localScale = new Vector3(5f, 3.5f, 1f); // Scale it up
                                }

                                else
                                {
                                    newRectTransform.localScale = Vector3.one; // Default scale
                                }


                                // Optionally, reset the scale and rotation
                                
                                newRectTransform.localRotation = Quaternion.identity;
                            }
                        }
                    }
                }
            }
        }

        // Set the flag to true after successful instantiation
        hasInstantiated = true;

        // Save instantiation status to PlayerPrefs
        PlayerPrefs.SetInt("ObjectsInstantiated", 1);
        PlayerPrefs.Save();

        Debug.Log("Object instantiated, disabling instantiation feature.");
    }

    // Clear PlayerPrefs when exiting play mode
    private void OnApplicationQuit()
    {
        PlayerPrefs.DeleteKey("ObjectsInstantiated");
    }
}
